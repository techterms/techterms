name: Release

on:
  push:
    branches: ['main']

  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no tag or release)'
        required: false
        default: 'false'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  BUILD_PATH: '.'

jobs:
  lint:
    name: Lint and Format Check
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.BUILD_PATH }}
      - name: Check formatting
        run: npm run format:check
        working-directory: ${{ env.BUILD_PATH }}
      - name: Check linting
        run: npm run lint
        working-directory: ${{ env.BUILD_PATH }}

  bump-version:
    name: Bump Version
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_PAT }}
          fetch-depth: 0 # Needed for pushing tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Bump patch version
        id: bump
        run: |
          current_version=$(jq -r '.version' version.json)
          IFS='.' read -r major minor patch <<< "$current_version"
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          jq --arg v "$new_version" '.version = $v' version.json > tmp.json && mv tmp.json version.json

      - name: Commit and push changes
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          PAT: ${{ secrets.BOT_PAT }}
        run: |
          git config user.name "techterms-bot"
          git config user.email "techterms@proton.me"
          git add version.json
          git commit -m "chore: bump version to v${{ steps.bump.outputs.new_version }}"
          git push

      - name: Tag version
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          PAT: ${{ secrets.BOT_PAT }}
        run: |
          git tag "v${{ steps.bump.outputs.new_version }}"
          git push origin "v${{ steps.bump.outputs.new_version }}"

      - name: Generate release notes
        id: release_notes
        shell: bash {0}
        run: |
          # Debug mode
          set -x

          # Get the previous tag
          previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$previous_tag" ]; then
            # If no previous tag, get all commits
            commits=$(git log --oneline --no-merges --format="* %s" HEAD)
          else
            # Get commits since the last tag, excluding merge commits and version bumps
            commits=$(git log --oneline --no-merges --format="* %s" ${previous_tag}..HEAD | grep -v "chore: bump version")
          fi

          # Create release body
          if [ -z "$commits" ]; then
            echo "body=No new commits in this release." >> $GITHUB_OUTPUT
          else
            {
              echo "## What's Changed"
              echo ""
              echo "$commits"
            } > temp_release_notes.txt
            
            echo "body<<EOF" >> $GITHUB_OUTPUT
            cat temp_release_notes.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Show Release Body
        run: |
          echo "${{ steps.release_notes.outputs.body }}"

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_PAT }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: Release v${{ steps.bump.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.body }}
          draft: false
          prerelease: false

  build:
    name: Build
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_PAT }}
          fetch-depth: 0
          ref: main
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        if: ${{ github.event.inputs.dry_run != 'true' }}
        id: deployment
        uses: actions/deploy-pages@v4
